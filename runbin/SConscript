import os


BIN = os.path.expanduser('~/.local/bin')
ARG = os.path.realpath('../bundle/argparse')


def build(env, bits, extra=''):
    suffix = str(bits if bits == 32 else '') + extra
    O = lambda x: x + '{}.o'.format(suffix)
    B = lambda x: x + '{}'.format(suffix)
    I = lambda x: x + '{}'.format(suffix)

    libhex = env.Object(O('libhex'), 'libhex.c')
    hex = env.Object(O('hex'), 'hex.c')
    unhex = env.Object(O('unhex'), 'unhex.c')
    argparse = env.Object(
        O('argparse'),
        os.path.join(ARG, 'argparse.c'))
    runbin = env.Object(O('runbin'), 'runbin.c')

    hex = env.Program(B('hex'), libhex + hex)
    unhex = env.Program(B('unhex'), libhex + unhex)
    runbin = env.Program(
        B('runbin'), runbin + libhex + argparse,
        LINKFLAGS=['-lm', '' if bits == 64 else '-m32'])

    env.Alias(I('install'), env.Install(BIN, [hex, unhex, runbin]))


env = Environment(
    CC='gcc',
    CCFLAGS=['-O2', '-I'+ ARG, '-std=c99'],
    LINKFLAGS=[]
)
build(env, 64)


env = Environment(
    CC='gcc',
    CCFLAGS=['-O2', '-I'+ ARG, '-std=c99', '-m32'],
    LINKFLAGS=['-m32'])
build(env, 32)


env = Environment(
    CC='i686-w64-mingw32-gcc',
    CCFLAGS=['-O2', '-I'+ ARG, '-std=c99'],
    LINKFLAGS=[])
build(env, 32, extra='.exe')


env = Environment(
    CC='x86_64-w64-mingw32-gcc',
    CCFLAGS=['-O2', '-I'+ ARG, '-std=c99'],
    LINKFLAGS=[''])
build(env, 64, extra='.exe')
